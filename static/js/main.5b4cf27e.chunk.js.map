{"version":3,"sources":["component/SearchBar.js","component/ProductCategoryRow.js","component/ProductRow.js","component/ProductTable.js","component/FilterableProductTable.js","component/Header.js","component/Side.js","component/App.js","serviceWorker.js","index.js"],"names":["SearchBar","props","filterText","inStockOnly","className","Form","Group","Control","type","placeholder","value","onChange","e","onFilterTextChange","target","controlId","Check","label","checked","onInStockChange","ProductCategoryRow","colSpan","category","ProductRow","product","name","stocked","style","color","price","ProductTable","products","rows","lastCategory","forEach","indexOf","push","key","Table","striped","bordered","FilterableProductTable","state","handleFilterTextChange","bind","handleInStockChange","this","setState","React","Component","Hearder","Jumbotron","fluid","Container","Navbar","bg","variant","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","Link","Side","Card","text","Header","Body","Title","Text","PRODUCTS","App","Row","Col","lg","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5b4cf27e.chunk.js","sourcesContent":["import React from 'react';\nimport { Form } from 'react-bootstrap';\n\nfunction SearchBar(props) {\n    const filterText = props.filterText;\n    const inStockOnly = props.inStockOnly;\n\n    function handleFilterTextChange(e) {\n        props.onFilterTextChange(e.target.value);\n    }\n\n    function handleInStockChange(e) {\n        props.onInStockChange(e.target.checked);\n    }\n\n    return (\n        <div className=\"mt-3\">\n            <Form.Group>\n                <Form.Control type=\"text\" placeholder=\"Search...\"\n                    value={filterText}\n                    onChange={handleFilterTextChange} />\n            </Form.Group>\n            <Form.Group controlId=\"formBasicCheckbox\">\n                <Form.Check type=\"checkbox\" label=\"Only show products in stock\"\n                    checked={inStockOnly}\n                    onChange={handleInStockChange} />\n            </Form.Group>\n        </div>\n    );\n}\n\nexport default SearchBar;","import React from 'react';\n\nfunction ProductCategoryRow(props) {\n    return (\n        <tr>\n            <th colSpan=\"2\">\n                {props.category}\n            </th>\n        </tr>\n    );\n}\n\nexport default ProductCategoryRow;","import React from 'react';\n\nfunction ProductRow(props) {\n    const product = props.product;\n    const name = product.stocked ? product.name : \n        <span style={{color: 'red'}}>\n            {product.name}\n        </span>\n    return (\n        <tr>\n            <td>{name}</td>\n            <td>{product.price}</td>\n        </tr>\n    );\n}\n\nexport default ProductRow;","import React from 'react';\nimport { Table } from \"react-bootstrap\";\nimport ProductCategoryRow from \"./ProductCategoryRow\";\nimport ProductRow from \"./ProductRow\";\n\nfunction ProductTable(props) {\n    const products = props.products;\n    const filterText = props.filterText;\n    const inStockOnly = props.inStockOnly;\n\n    const rows = [];\n    let lastCategory = null;\n\n    products.forEach((product) => {\n        if (product.name.indexOf(filterText) === -1) {\n            return;\n        }\n\n        if (inStockOnly && !product.stocked) {\n            return;\n        }\n\n        if (product.category !== lastCategory) {\n            rows.push(\n                <ProductCategoryRow\n                    category={product.category}\n                    key={product.category} />\n            );\n        }\n        rows.push(\n            <ProductRow\n                product={product}\n                key={product.name} />\n        );\n        lastCategory = product.category;\n    });\n\n    return (\n        <Table striped bordered>\n            <thead>\n                <tr>\n                    <th>Name</th>\n                    <th>Price</th>\n                </tr>\n            </thead>\n            <tbody>\n                {rows}\n            </tbody>\n        </Table>\n    );\n}\n\nexport default ProductTable;","import React from 'react';\nimport SearchBar from './SearchBar';\nimport ProductTable from './ProductTable';\n\nclass FilterableProductTable extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            filterText: '',\n            inStockOnly: false\n        };\n        this.handleFilterTextChange = this.handleFilterTextChange.bind(this);\n        this.handleInStockChange = this.handleInStockChange.bind(this);\n    }\n\n    handleFilterTextChange(filterText) {\n        this.setState({filterText: filterText});\n    }\n\n    handleInStockChange(inStockOnly) {\n        this.setState({inStockOnly: inStockOnly});\n    }\n    \n    render() {\n        return (\n            <div>\n                <SearchBar \n                    filterText={this.state.filterText}\n                    inStockOnly={this.state.inStockOnly} \n                    onFilterTextChange={this.handleFilterTextChange} \n                    onInStockChange={this.handleInStockChange} />\n                <ProductTable \n                    filterText={this.state.filterText}\n                    inStockOnly={this.state.inStockOnly}\n                    products={this.props.products} />\n            </div>\n        );\n    }\n}\n\nexport default FilterableProductTable;","import React from 'react';\nimport { Navbar, Nav, Container, Jumbotron } from 'react-bootstrap';\n\nfunction Hearder() {\n    return (\n        <div>\n            <Jumbotron fluid className=\"mb-0\">\n                <Container>\n                    <h1>First React App, layout by bootstrap</h1>\n                    <p>\n                        This is a modified jumbotron that occupies the entire horizontal space of\n                        its parent.\n                    </p>\n                </Container>\n            </Jumbotron>\n            <Navbar bg=\"dark\" variant=\"dark\" expand=\"md\">\n                <Container>\n                <Navbar.Brand href=\"#home\">ReactApp</Navbar.Brand>\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                <Navbar.Collapse id=\"basic-navbar-nav\">\n                    <Nav className=\"mr-auto\">\n                        <Nav.Link href=\"#home\">Home</Nav.Link>\n                        <Nav.Link href=\"#features\">Features</Nav.Link>\n                        <Nav.Link href=\"#pricing\">Pricing</Nav.Link>\n                    </Nav>\n                </Navbar.Collapse>\n                </Container>\n            </Navbar>\n        </div>\n    );\n}\n\nexport default Hearder;","import React from 'react';\nimport { Card } from 'react-bootstrap';\n\nfunction Side() {\n    return (\n        <Card\n            bg=\"light\"\n            text=\"dark\" \n            className=\"mt-3\" >\n            <Card.Header>Header</Card.Header>\n            <Card.Body>\n                <Card.Title>Light Card Title </Card.Title>\n                <Card.Text>\n                    Some quick example text to build on the card title and make up the\n                    bulk of the card's content.\n                </Card.Text>\n            </Card.Body>\n        </Card>\n    );\n}\n\nexport default Side;","import React from 'react';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport '../css/App.css';\nimport FilterableProductTable from './FilterableProductTable';\nimport Header from './Header';\nimport Side from './Side';\n\nconst PRODUCTS = [\n    {category: \"Sporting Goods\", price: \"$49.99\", stocked: true, name: \"Football\"},\n    {category: \"Sporting Goods\", price: \"$9.99\", stocked: true, name: \"Baseball\"},\n    {category: \"Sporting Goods\", price: \"$29.99\", stocked: false, name: \"Basketball\"},\n    {category: \"Electronics\", price: \"$99.99\", stocked: true, name: \"iPod Touch\"},\n    {category: \"Electronics\", price: \"$399.99\", stocked: false, name: \"iPhone 5\"},\n    {category: \"Electronics\", price: \"$199.99\", stocked: true, name: \"Nexus 7\"}\n];\n\nclass App extends React.Component {\n    render() {\n        return (\n            <div>\n                <Header />\n                <Container>\n                    <Row>\n                        <Col lg={4}>\n                            <Side />\n                        </Col>\n                        <Col lg={8}>\n                            <FilterableProductTable products={PRODUCTS}/>\n                        </Col>\n                    </Row>\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './component/App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}